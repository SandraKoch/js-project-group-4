{"mappings":"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","sources":["src/javascript/loader.js","src/javascript/fetchTrendingMovies.js","src/javascript/pagination.js","src/javascript/backToTop.js"],"sourcesContent":["import { refs } from './refs';\nimport { API_KEY} from './config';\n\n\nfunction showLoader() {\n  refs.loader.classList.add('active');\n}\n\nfunction hideLoader() {\n  refs.loader.classList.remove('active');\n}\n\nfunction performSearch() {\n  const query = refs.searchInputElement.value.trim();\n  if (query !== '') {\n    const xhr = new XMLHttpRequest();\n\n    xhr.addEventListener('loadstart', () => {\n      showLoader();\n    });\n\n    xhr.addEventListener('loadend', () => {\n      hideLoader();\n    });\n\n    const url = `https://api.themoviedb.org/3/search/movie?query=${encodeURIComponent(\n      query,\n    )}&api_key=${API_KEY}`;\n    xhr.open('GET', url, true);\n    xhr.setRequestHeader('Content-Type', 'application/json');\n\n    xhr.onload = function () {\n      if (xhr.status === 200) {\n        const response = JSON.parse(xhr.responseText);\n        console.log(response);\n      } else {\n        console.error('Wystąpił błąd podczas żądania API.');\n      }\n    };\n\n    xhr.onerror = function () {\n      console.error('Wystąpił błąd podczas żądania API.');\n    };\n    xhr.send();\n  }\n}\n\nrefs.searchFormElement.addEventListener('submit', function (e) {\n  e.preventDefault();\n  performSearch();\n});\n\nshowLoader();\n\nsetTimeout(function () {\n  hideLoader();\n}, 250);\n\nwindow.addEventListener('beforeunload', function () {\n  showLoader();\n});\n","import { API_KEY, ACCESS_TOKEN, PAGE } from './config';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { refs } from './refs';\nimport { options } from './config';\n\nlet genresArr = [];\nlet currentGenreId = null;\n\nexport async function searchMovies(query, page) {\n  return fetch(\n    `https://api.themoviedb.org/3/search/movie?query=${query}&include_adult=false&page=${page}`,\n    options,\n  )\n    .then(response => response.json())\n    .then(jsonResponse => {\n      return jsonResponse;\n    })\n    .catch(err => console.error(err));\n}\n\nexport function displayMovies(results) {\n  const moviesArr = results.results;\n  refs.main.innerHTML = '';\n\n  moviesArr.forEach(film => {\n    // console.log('film.poster_path', film.poster_path);\n\n    const movieGenres = film.genre_ids\n      .map(genreId => {\n        const genre = genresArr.find(genre => genre.id === genreId);\n        return genre ? genre.name.toString() : '';\n      })\n      .join(', ');\n\n    const releaseDate = new Date(film.release_date).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: undefined,\n      day: undefined,\n    });\n\n    refs.main.insertAdjacentHTML(\n      'beforeend',\n      `\n      <li id=\"main__element\" class=\"main__element\">\n        <div id=\"main__item\" class=\"main__item\">\n          <figure id=\"main__movie\" class=\"main__movie\">\n            <img id=\"${film.id}\" class=\"main__image\"\n              src=\"${\n                film.poster_path\n                  ? `https://image.tmdb.org/t/p/w500${film.poster_path}`\n                  : `https://github.com/SandraKoch/js-project-group-4/blob/main/src/images/no-image-here.png?raw=true`\n              }\" alt=\"${film.title}\" />\n            <figcaption id=\"main__caption\" class=\"main__caption\">\n              <span id=\"main__movie-name\" class=\"main__movie-name\">\n                ${film.original_title}\n              </span>\n              <div>\n              <span id=\"main__movie-genres\" class=\"main__movie-data\">${movieGenres}</span>\n              <span class=\"main__movie-data\">|</span>\n              <span id=\"main__movie-release-date\" class=\"main__movie-release-date main__movie-data\">\n                ${releaseDate}\n              </span>\n              </div>\n            </figcaption>\n          </figure>\n        </li>\n      </ul>`,\n    );\n  });\n}\n\nexport function initTrendingMovies() {\n  const PAGE = 1; // Ustaw odpowiednią wartość strony\n\n  function fetchGenres() {\n    return fetch('https://api.themoviedb.org/3/genre/movie/list?language=en', options)\n      .then(response => response.json())\n      .catch(err => console.error(err));\n  }\n\n  function fetchPopular() {\n    return fetch('https://api.themoviedb.org/3/trending/movie/day?language=en-US', options)\n      .then(response => response.json())\n      .catch(err => console.error(err));\n  }\n\n  Promise.all([fetchGenres(), fetchPopular()]).then(res => {\n    console.log('res', res);\n    const [genresRes, popularRes] = res;\n    //first promise\n    genresArr = genresRes.genres;\n    //second promise\n    refs.main.innerHTML = '';\n\n    console.log(popularRes, 'popularRes');\n\n    displayMovies(popularRes);\n\n    // Create genre buttons\n    const genresContainer = document.getElementById('genres');\n    genresArr.forEach(genre => {\n      const button = document.createElement('button');\n      button.classList.add('button');\n      button.textContent = genre.name;\n      button.addEventListener('click', () => {\n        currentGenreId = genre.id;\n        searchMoviesByGenre(currentGenreId, PAGE); // Przekazanie wartości strony\n      });\n      genresContainer.appendChild(button);\n    });\n  });\n\n  if (refs.searchFormElement) {\n    refs.searchFormElement.addEventListener('submit', async e => {\n      e.preventDefault();\n      const trimmedInputValue = refs.searchInputElement.value.trim();\n      const foundMovies = await searchMovies(trimmedInputValue, PAGE);\n\n      if (trimmedInputValue !== '') {\n        handleResults(foundMovies);\n        const genresContainer = document.getElementById('genres');\n        genresContainer.style.display = 'none';\n      } else {\n        Notify.info('Please, enter the movie name to start search');\n      }\n    });\n  }\n}\n\nasync function searchMoviesByGenre(genreId, page) {\n  const response = await fetch(\n    `https://api.themoviedb.org/3/discover/movie?with_genres=${genreId}&include_adult=false&page=${page}`,\n    options,\n  );\n  const data = await response.json();\n  displayMovies(data);\n}\n\nfunction handleResults(apiObject) {\n  if (apiObject.results.length) {\n    displayMovies(apiObject);\n    const total = apiObject.total_results;\n    Notify.success(`Hooray! You have found ${total} movies matching your query`);\n  } else {\n    Notify.failure('Oops, there are no movies matching your search query. Please try again.');\n  }\n}\n","import { searchMovies, displayMovies } from './fetchTrendingMovies';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { refs } from './refs';\n\nlet currentPage = 1;\nlet totalPages = 20;\n\nfunction updatePaginationButtons() {\n  refs.previousButton.disabled = currentPage === 1;\n  refs.nextButton.disabled = currentPage === totalPages;\n}\n\nfunction createPaginationItem(pageNumber, isActive) {\n  const listItem = document.createElement('li');\n  const button = document.createElement('button');\n  button.classList.add('pagination__element', 'pagination__element--button');\n  button.textContent = pageNumber;\n  button.addEventListener('click', () => {\n    if (pageNumber !== currentPage) {\n      currentPage = pageNumber;\n      performSearch();\n    }\n  });\n\n  if (isActive) {\n    button.classList.add('active');\n  }\n\n  listItem.appendChild(button);\n  return listItem;\n}\n\nfunction createPaginationEllipsis() {\n\n  const listItem = document.createElement('li');\n  const ellipsisSpan = document.createElement('span');\n  ellipsisSpan.classList.add('pagination__element', 'pagination__element--ellipsis');\n  ellipsisSpan.textContent = '...';\n  listItem.appendChild(ellipsisSpan);\n  return listItem;\n}\n\nasync function performSearch() {\n  const query = refs.searchInputElement.value.trim();\n  const searchResults = await searchMovies(query, currentPage);\n\n  if (searchResults.results.length) {\n    displayMovies(searchResults);\n    totalPages = searchResults.total_pages; // Przypisanie wartości totalPages\n    generatePagination(totalPages);\n  } else {\n    refs.main.innerHTML = '';\n    Notify.failure('Oops, there are no movies matching your search query. Please try again.');\n  }\n}\n\nfunction generatePagination(totalPages) {\n  refs.paginationList.innerHTML = '';\n\n  let maxVisibleButtons = 5;\n  const maxVisibleButtonsHalf = Math.floor(maxVisibleButtons / 2);\n\n  let firstVisiblePage, lastVisiblePage;\n\n  if (currentPage <= maxVisibleButtonsHalf) {\n    firstVisiblePage = 1;\n    lastVisiblePage = Math.min(maxVisibleButtons, totalPages);\n  } else if (currentPage > totalPages - maxVisibleButtonsHalf) {\n    firstVisiblePage = 1;\n    lastVisiblePage = totalPages;\n    if (totalPages > maxVisibleButtons) {\n      firstVisiblePage = totalPages - maxVisibleButtons + 1;\n      refs.paginationList.appendChild(createPaginationItem(1, false));\n      refs.paginationList.appendChild(createPaginationEllipsis());\n    }\n  } else {\n    firstVisiblePage = currentPage - maxVisibleButtonsHalf + 1;\n    lastVisiblePage = currentPage + maxVisibleButtonsHalf - 1;\n    refs.paginationList.appendChild(createPaginationItem(1, false));\n    refs.paginationList.appendChild(createPaginationEllipsis());\n  }\n\n  for (let i = firstVisiblePage; i <= lastVisiblePage; i++) {\n    const isActive = i === currentPage;\n    refs.paginationList.appendChild(createPaginationItem(i, isActive));\n  }\n\n  if (lastVisiblePage < totalPages) {\n    refs.paginationList.appendChild(createPaginationEllipsis());\n  }\n\n  const lastPageItem = createPaginationItem(totalPages, false);\n  refs.paginationList.appendChild(lastPageItem);\n\n  updatePaginationButtons();\n}\n\nrefs.previousButton.addEventListener('click', () => {\n  if (currentPage > 1) {\n    currentPage--;\n    performSearch();\n  }\n});\n\nrefs.nextButton.addEventListener('click', () => {\n  currentPage++;\n  performSearch();\n});\n\ngeneratePagination(totalPages);\n","     window.addEventListener('scroll', function() {\n            var backToTopButton = document.getElementById('back-to-top');\n            if (window.scrollY > 250) {\n                backToTopButton.style.display = 'block';\n            } else {\n                backToTopButton.style.display = 'none';\n            }\n        });\n\n        window.addEventListener('DOMContentLoaded', function() {\n            var backToTopButton = document.getElementById('back-to-top');\n            backToTopButton.addEventListener('click', function(e) {\n                e.preventDefault();\n                var header = document.querySelector('#header');\n                header.scrollIntoView({ behavior: 'smooth' });\n            });\n        });"],"names":["$eTQlF","parcelRequire","$1b853ccb828b18af$var$showLoader","refs","loader","classList","add","$1b853ccb828b18af$var$hideLoader","remove","searchFormElement","addEventListener","e","preventDefault","query","searchInputElement","value","trim","xhr","XMLHttpRequest","url","encodeURIComponent","$kKgoE","API_KEY","open","setRequestHeader","onload","status","response","JSON","parse","responseText","console","log","error","onerror","send","$1b853ccb828b18af$var$performSearch","setTimeout","window","$a422f70149cb0f66$var$genresArr","$a422f70149cb0f66$var$currentGenreId","async","$a422f70149cb0f66$export$b0c4d3ac9887d994","page","fetch","options","then","json","jsonResponse","catch","err","$a422f70149cb0f66$export$80c33a899040816b","results","moviesArr","main","innerHTML","forEach","film","movieGenres","genre_ids","map","genreId","genre","find","id","name","toString","join","releaseDate","Date","release_date","toLocaleDateString","year","month","undefined","day","insertAdjacentHTML","poster_path","title","original_title","$851c5e5c523018e2$var$currentPage","$851c5e5c523018e2$var$totalPages","$851c5e5c523018e2$var$createPaginationItem","pageNumber","isActive","listItem","document","createElement","button","textContent","$851c5e5c523018e2$var$performSearch","appendChild","$851c5e5c523018e2$var$createPaginationEllipsis","ellipsisSpan","searchResults","length","total_pages","$851c5e5c523018e2$var$generatePagination","$apLMo","Notify","failure","totalPages","paginationList","maxVisibleButtonsHalf","Math","floor","maxVisibleButtons","firstVisiblePage","lastVisiblePage","min","i","lastPageItem","previousButton","disabled","nextButton","backToTopButton","getElementById","scrollY","style","display","querySelector","scrollIntoView","behavior","Promise","all","res","genresRes","popularRes","genres","genresContainer","$a422f70149cb0f66$var$searchMoviesByGenre","trimmedInputValue","foundMovies","apiObject","total","total_results","success","$a422f70149cb0f66$var$handleResults","info"],"version":3,"file":"index.068eef3b.js.map"}